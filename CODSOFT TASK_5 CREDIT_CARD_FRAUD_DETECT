#SNEHA TRIPATHI
 #codsoft
                # TASK 5 : Credit Card Fraud Detection

# Importing Necessary Library
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import streamlit as st

data = pd.read_csv('creditcard.csv')  # lo472.0,-3.0435406239976,-3.15730712090228,1.08846277997285,2.2886436183814,1.35980512966107,-1.06482252298131,0.325574266158614,-0.0677936531906277,-0.270952836226548,-0.838586564582682,-0.414575448285725,-0.503140859566824,0.676501544635863,-1.69202893305906,2.00063483909015,0.666779695901966,0.599717413841732,1.72532100745514,0.283344830149495,2.10233879259444,0.661695924845707,0.435477208966341,1.37596574254306,-0.293803152734021,0.279798031841214,-0.145361714815161,-0.252773122530705,0.0357642251788156,529.0ading csv data

# separate fraudulent and not fraudulent transcation
nofroud = data[data.Class == 0]
fraud = data[data.Class == 1]
#nofroud.to_csv('nofrd.csv',index=False)
#fraud.to_csv('frd.csv',index=False)


# balance both trans bcz they are not same
nofroud_sample = nofroud.sample(n=len(fraud),random_state=2)
data = pd.concat([nofroud_sample,fraud],axis=0)

x = data.drop(columns="Class",axis=1)
y = data["Class"]

# spliting data into training and testing part
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

# train logistic regression model
model = LogisticRegression()
model.fit(x_train,y_train)

check_train = accuracy_score(model.predict(x_train),y_train)  # checking performance of model

check_test = accuracy_score(model.predict(x_test),y_test)

st.title("Credit Card Fraud Detection ")
st.write("Enter Features to check if the transcation ids legitimate or fraudulent")
st.info("Legitimate Transcation -> Non Fraudulent Transcation (Normal Transcation)")


input = st.text_input("Enter Features")

input1 = input.split(',')

submit = st.button("Detect")

if submit:

    values = np.array(input1,dtype=np.float64)

    detection = model.predict(values.reshape(1,-1))

    if detection[0] == 0:
        st.subheader("Legitimate Transcation")
    else:
